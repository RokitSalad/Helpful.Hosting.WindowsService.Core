# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
name: 1.0.$(Rev:r)

trigger:
- master
- dev
- feature/worker-services

pool:
  vmImage: 'windows-latest'

variables:
  - group: helpful-libraries-secrets
  - name: buildConfiguration
    value: "Release"

stages:

- stage: BuildandPackage
  displayName: Build and Package
  jobs:

  - job: build4TS
    displayName: 'Build for TopShelf'
    steps:

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/Helpful.Hosting.WindowsService.Core.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/Helpful.Hosting.WindowsService.Core.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: 'pack'
          packagesToPack: '**/Helpful.Hosting.WindowsService.Core.csproj'
          versioningScheme: 'byBuildNumber'
          verbosityPack: 'Diagnostic'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: Helpful.Hosting.WindowsService.Core

  - job: BuildDemoService
    displayName: Build DemoService
    steps:
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoService.csproj'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoService/'
        publishWebProjects: false
        projects: '**/DemoService.csproj'
        zipAfterPublish: True
  
    - publish: '$(Build.ArtifactStagingDirectory)\DemoService'
      artifact: DemoService

  - job: BuildDemoServiceBackgroundProcess
    displayName: Build DemoService BackgroundProcess
    steps:
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoServiceBackgroundProcess.csproj'
  
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoServiceBackgroundProcess/'
        publishWebProjects: false
        projects: '**/DemoServiceBackgroundProcess.csproj'
        zipAfterPublish: True
  
    - publish: '$(Build.ArtifactStagingDirectory)\DemoServiceBackgroundProcess'
      artifact: DemoServiceBackgroundProcess

  - job: BuildDemoServiceQuickStartApi
    displayName: Build DemoService QuickStartApi
    steps:
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoServiceQuickStartApi.csproj'
  
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoServiceQuickStartApi/'
        publishWebProjects: false
        projects: '**/DemoServiceQuickStartApi.csproj'
        zipAfterPublish: True
    
    - publish: '$(Build.ArtifactStagingDirectory)\DemoServiceQuickStartApi'
      artifact: DemoServiceQuickStartApi
    
  - job: build4WWS
    displayName: 'Build for Windows Worker Service'
    steps:

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '3.x'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/Helpful.Hosting.WorkerService.Windows.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/Helpful.Hosting.WorkerService.Windows.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: 'pack'
          arguments: 'nobuild'
          packagesToPack: '**/Helpful.Hosting.WorkerService.Windows.nuspec'
          versioningScheme: 'byBuildNumber'
          verbosityPack: 'Diagnostic'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: Helpful.Hosting.WorkerService.Windows
    
  - job: build4LWS
    displayName: 'Build for Linux Worker Service'
    steps:

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '3.x'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/Helpful.Hosting.WorkerService.Systemd.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/Helpful.Hosting.WorkerService.Systemd.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: 'pack'
          arguments: 'nobuild'
          packagesToPack: '**/Helpful.Hosting.WorkerService.Systemd.nuspec'
          versioningScheme: 'byBuildNumber'
          verbosityPack: 'Diagnostic'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: Helpful.Hosting.WorkerService.Systemd
  
  - job: BuildDemoWorkerAdvanced
    displayName: 'Build for the Advanced Demo Worker'
    steps: 

      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '5.0.x'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/DemoWorkerAdvanced.csproj'
    
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/DemoWorkerAdvanced.csproj'
  
      - task: DotNetCoreCLI@2
        inputs:
          command: 'publish'
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoWorkerAdvanced/'
          publishWebProjects: false
          projects: '**/DemoWorkerAdvanced.csproj'
          zipAfterPublish: True
    
      - publish: '$(Build.ArtifactStagingDirectory)\DemoWorkerAdvanced'
        artifact: DemoWorkerAdvanced      

- stage: IntegrationTest
  displayName: Integration Test
  dependsOn: BuildandPackage
  condition: succeeded()
  jobs:

  - deployment: VMDeploy_DevOps
    displayName: Deploy Helpful.DevOps to target server
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UniversalPackages@0
            displayName: Download DevOps Package
            inputs:
              command: 'download'
              downloadDirectory: '$(Pipeline.Workspace)'
              feedsToUse: 'internal'
              vstsFeed: '$(helpful-libraries-feed-automation-uri)'
              vstsFeedPackage: 'ba482169-4bdc-4fa9-a242-18a9b608af5d'
              vstsPackageVersion: '*'
              verbosity: 'Debug'

          - task: PowerShell@2
            displayName: Unpack DevOps
            inputs:
              targetType: 'inline'
              script: |
                Get-ChildItem $(Pipeline.Workspace) -Filter Helpful.DevOps.*.zip | sort LastWriteTime | select -last 1 | ForEach-Object {
                  Expand-Archive $_.FullName -DestinationPath "$(Pipeline.Workspace)\Helpful.DevOps" -Force
                }                
              errorActionPreference: 'stop'

  - deployment: VMDeploy_DemoService
    dependsOn: VMDeploy_DevOps
    condition: succeeded()
    displayName: Deploy DemoService to IntegrationTesting
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoService
            artifact: 'DemoService'

          - task: PowerShell@2
            displayName: Run DevOps
            inputs:
              targetType: 'inline'
              script: |
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\uninstallService.ps1" -ServiceName "DemoService" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\installService.ps1" -ServiceName "DemoService" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH -PipelineWorkspacePath $(Pipeline.Workspace)                
              errorActionPreference: 'stop'

  - deployment: VMDeploy_DemoServiceBackgroundProcess
    displayName: Deploy DemoServiceBackgroundProcess to IntegrationTesting
    dependsOn: VMDeploy_DevOps
    condition: succeeded()
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoServiceBackgroundProcess
            artifact: 'DemoServiceBackgroundProcess'

          - task: PowerShell@2
            displayName: Run DevOps
            inputs:
              targetType: 'inline'
              script: |
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\uninstallService.ps1" -ServiceName "DemoServiceBackgroundProcess" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\installService.ps1" -ServiceName "DemoServiceBackgroundProcess" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH -PipelineWorkspacePath $(Pipeline.Workspace)                
              errorActionPreference: 'stop'

  - deployment: VMDeploy_DemoServiceQuickStartApi
    displayName: Deploy DemoServiceQuickStartApi to IntegrationTesting
    dependsOn: VMDeploy_DevOps
    condition: succeeded()
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoServiceQuickStartApi
            artifact: 'DemoServiceQuickStartApi'

          - task: PowerShell@2
            displayName: Run DevOps
            inputs:
              targetType: 'inline'
              script: |
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\uninstallService.ps1" -ServiceName "DemoServiceQuickStartApi" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\installService.ps1" -ServiceName "DemoServiceQuickStartApi" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH -PipelineWorkspacePath $(Pipeline.Workspace)                
              errorActionPreference: 'stop'
  
  - deployment: VMDeploy_DemoWorkerAdvanced
    dependsOn: VMDeploy_DevOps
    condition: succeeded()
    displayName: Deploy DemoWorkerAdvanced to IntegrationTesting
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoWorkerAdvanced
            artifact: 'DemoWorkerAdvanced'

          - task: PowerShell@2
            displayName: Run DevOps
            inputs:
              targetType: 'inline'
              script: |
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\uninstallWorkerService.ps1" -ServiceName "DemoWorkerAdvanced" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH
                & "$(Pipeline.Workspace)\Helpful.DevOps\s\Powershell\installWorkerService.ps1" -ServiceName "DemoWorkerAdvanced" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH -PipelineWorkspacePath $(Pipeline.Workspace) -ServiceUsername '$(demoworkeradvanced-username)' -Password (ConvertTo-SecureString -String '$(demoworkeradvanced-password)' -AsPlainText -Force) -ServiceUsersGroup '$(integrationtest-server-serviceusers)'
              errorActionPreference: 'stop'
              pwsh: true

  - job: RunInegrationTests
    displayName: Run Integration Tests
    dependsOn: 
    - VMDeploy_DemoServiceQuickStartApi
    - VMDeploy_DemoServiceBackgroundProcess
    - VMDeploy_DemoService
    condition: succeeded()
    steps:
      
      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore - integration tests'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/*.csproj'
    
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build - integration tests'
        inputs:
          command: 'build'
          projects: '**/*IntegrationTest*.csproj'

      - task: VSTest@2
        displayName: run integration tests
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: '**\bin\**\*IntegrationTests.dll'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          runInParallel: true
          runTestsInIsolation: true
          testRunTitle: 'Helpful Hosting Integration Tests'
          configuration: 'Release'

- stage: Publish
  dependsOn: IntegrationTest
  condition: succeeded()
  jobs:

  - job: PublishLocal
    displayName: Publish to local feed
    steps:
  
    - download: current
      displayName: Retrieve artifact 4 Windows
      artifact: Helpful.Hosting.WorkerService.Windows
  
    - download: current
      displayName: Retrieve artifact 4 Linux
      artifact: Helpful.Hosting.WorkerService.Systemd
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet push'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(helpful-libraries-feed-allbuilds-uri)'
  
  - job: PublishPublic
    displayName: Publish to Nuget.org
    condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
    steps:
  
    #- download: current
    #  displayName: Retrieve artifact
    #  artifact: Helpful.Hosting.WindowsService.Core
  
    - download: current
      displayName: Retrieve artifact 4 Windows
      artifact: Helpful.Hosting.WorkerService.Windows
  
    - download: current
      displayName: Retrieve artifact 4 Linux
      artifact: Helpful.Hosting.WorkerService.Systemd
  
    - task: DotNetCoreCLI@2
      displayName: 'nuget push'
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/**/*.nupkg
          -s $(NugetOrgServerUrl)
          -k $(NugetOrgApiKey)
