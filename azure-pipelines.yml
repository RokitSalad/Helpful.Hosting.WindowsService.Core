# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
name: 1.0.$(Rev:r)

trigger:
- master
- dev

pool:
  vmImage: 'windows-latest'

variables:
  - group: helpful-libraries-secrets
  - name: buildConfiguration
    value: "Release"

stages:

- stage: BuildandPackage
  displayName: Build and Package
  jobs:

  - job: build
    steps:

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          projects: '**/Helpful.Hosting.WindowsService.Core.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'build'
          projects: '**/Helpful.Hosting.WindowsService.Core.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: 'pack'
          packagesToPack: '**/Helpful.Hosting.WindowsService.Core.csproj'
          versioningScheme: 'byBuildNumber'
          verbosityPack: 'Diagnostic'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: Helpful.Hosting.WindowsService.Core

  - job: BuildDemoService
    displayName: Build DemoService
    steps:
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoService.csproj'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoService/'
        publishWebProjects: false
        projects: '**/DemoService.csproj'
        zipAfterPublish: True
  
    - publish: '$(Build.ArtifactStagingDirectory)\DemoService'
      artifact: DemoService

  - job: BuildDemoServiceBackgroundProcess
    displayName: Build DemoService BackgroundProcess
    steps:
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoServiceBackgroundProcess.csproj'
  
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoServiceBackgroundProcess/'
        publishWebProjects: false
        projects: '**/DemoServiceBackgroundProcess.csproj'
        zipAfterPublish: True
  
    - publish: '$(Build.ArtifactStagingDirectory)\DemoServiceBackgroundProcess'
      artifact: DemoServiceBackgroundProcess

  - job: BuildDemoServiceQuickStartApi
    displayName: Build DemoService QuickStartApi
    steps:
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        feedsToUse: 'select'
        projects: '**/*.csproj'
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: 'build'
        projects: '**/DemoServiceQuickStartApi.csproj'
  
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DemoServiceQuickStartApi/'
        publishWebProjects: false
        projects: '**/DemoServiceQuickStartApi.csproj'
        zipAfterPublish: True
    
    - publish: '$(Build.ArtifactStagingDirectory)\DemoServiceQuickStartApi'
      artifact: DemoServiceQuickStartApi

- stage: Test
  dependsOn: BuildandPackage
  condition: succeeded()
  jobs:

  - deployment: VMDeploy_BuildDemoService
    displayName: Deploy DemoService to IntegrationTesting
    condition: succeeded()
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoService
            artifact: 'DemoService'

          - task: UniversalPackages@0
            inputs:
              command: 'download'
              downloadDirectory: '$(Pipeline.Workspace)'
              feedsToUse: 'internal'
              vstsFeed: '40f82a44-ccb3-4b97-b78a-4f61f521b9c3/b741ff8b-6a2a-449f-8a54-a7fefb333bf0'
              vstsFeedPackage: 'ba482169-4bdc-4fa9-a242-18a9b608af5d'
              vstsPackageVersion: '*'
              verbosity: 'Debug'
              publishedPackageVar: $(DevOps)

          - task: PowerShell@2
            displayName: Unpack and Run DevOps
            inputs:
              targetType: 'inline'
              script: |
                Expand-Archive '$(Pipeline.Workspace)\$(DevOps)' -DestinationPath "$(Pipeline.Workspace)\DevOps"
                & "$(Pipeline.Workspace)\DevOps\Powershell\uninstallService.ps1" -ServiceName "DemoService" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH
                & "$(Pipeline.Workspace)\DevOps\Powershell\installService.ps1" -ServiceName "DemoService" -InstallationRoot $Env:AZDO_APP_INSTALL_PATH -PipelineWorkspacePath $(Pipeline.Workspace)
              errorActionPreference: 'stop'

  - deployment: VMDeploy_DemoServiceBackgroundProcess
    displayName: Deploy DemoServiceBackgroundProcess to IntegrationTesting
    condition: succeeded()
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoServiceBackgroundProcess
            artifact: 'DemoServiceBackgroundProcess'
  
          - task: PowerShell@2
            displayName: Clean up existing service
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
        
                $InstallPath = "$Env:AZDO_APP_INSTALL_PATH\DemoServiceBackgroundProcess"
                & "$InstallPath\DemoServiceBackgroundProcess.exe" stop
                Start-Sleep -Seconds 3
                & "$InstallPath\DemoServiceBackgroundProcess.exe" uninstall
                Start-Sleep -Seconds 15
              errorActionPreference: 'continue'
  
          - task: PowerShell@2
            displayName: Install new service
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
        
                $InstallPath = "$Env:AZDO_APP_INSTALL_PATH\DemoServiceBackgroundProcess"
                if(Test-Path -Path $InstallPath){
                  Remove-Item $InstallPath -recurse -force 
                }                
                Expand-Archive $(Pipeline.Workspace)\DemoServiceBackgroundProcess\DemoServiceBackgroundProcess.zip -DestinationPath $InstallPath
                & "$InstallPath\DemoServiceBackgroundProcess.exe" install
                Start-Sleep -Seconds 5
                & "$InstallPath\DemoServiceBackgroundProcess.exe" start
              errorActionPreference: 'stop'

  - deployment: VMDeploy_DemoServiceQuickStartApi
    displayName: Deploy DemoServiceQuickStartApi to IntegrationTesting
    condition: succeeded()
    environment:
      name: IntegrationTesting-EC2
      resourceType: VirtualMachine
      tags: service
    strategy:
      runOnce:
        deploy:
          steps:
  
          - download: current
            displayName: Download DemoServiceQuickStartApi
            artifact: 'DemoServiceQuickStartApi'
  
          - task: PowerShell@2
            displayName: Clean up existing service
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
        
                $InstallPath = "$Env:AZDO_APP_INSTALL_PATH\DemoServiceQuickStartApi"
                & "$InstallPath\DemoServiceQuickStartApi.exe" stop
                Start-Sleep -Seconds 3
                & "$InstallPath\DemoServiceQuickStartApi.exe" uninstall
                Start-Sleep -Seconds 15
              errorActionPreference: 'continue'
  
          - task: PowerShell@2
            displayName: Install new service
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
        
                $InstallPath = "$Env:AZDO_APP_INSTALL_PATH\DemoServiceQuickStartApi"
                if(Test-Path -Path $InstallPath){
                  Remove-Item $InstallPath -recurse -force 
                } 
                Expand-Archive $(Pipeline.Workspace)\DemoServiceQuickStartApi\DemoServiceQuickStartApi.zip -DestinationPath $InstallPath
                & "$InstallPath\DemoServiceQuickStartApi.exe" install
                Start-Sleep -Seconds 5
                & "$InstallPath\DemoServiceQuickStartApi.exe" start
              errorActionPreference: 'stop'

- stage: Publish
  dependsOn: test
  condition: succeeded()
  jobs:

  - job: PublishLocal
    displayName: Publish to local feed
    condition: succeeded()
    steps:
  
    - download: current
      displayName: Retrieve artifact
      artifact: Helpful.Hosting.WindowsService.Core
  
    - task: DotNetCoreCLI@2
      displayName: 'dotnet push'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(helpful-libraries-feed-allbuilds-uri)'
  
  - job: PublishPublic
    displayName: Publish to Nuget.org
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
    steps:
  
    - download: current
      displayName: Retrieve artifact
      artifact: Helpful.Hosting.WindowsService.Core
  
    - task: DotNetCoreCLI@2
      displayName: 'nuget push'
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Pipeline.Workspace)/**/*.nupkg
          -s $(NugetOrgServerUrl)
          -k $(NugetOrgApiKey)
